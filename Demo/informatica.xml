<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<question type = "category">
	<category>
		<text>EsempioEsameInfo</text>
	</category>
</question>
	<question type="essay">
		<name>
			<text> Trasformazione basi </text>
		</name>
		<questiontext format = "html">
		<text><![CDATA[<p><p>Dato il numero 21 in base 10 riportarne la sua codifica in binario, ottale ed esadecimale</p></p>]]></text>
		</questiontext>
		<generalfeedback format = "html">
		<text></text>
		</generalfeedback>
		<defaultgrade> 2.0 </defaultgrade>
		<penalty> 0 </penalty>
		<hidden> 0 </hidden>
		<responseformat>editor</responseformat>
		<responserequired>0</responserequired>
		<responsefieldlines>15</responsefieldlines>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<graderinfo format="html">
		<text></text>
		</graderinfo>
		<responsetemplate format="html">
		<text><![CDATA[<p> <p>Risposte:</p>
<ul>
<li>
<p>base 2)</p>
</li>
<li>
<p>base 8)</p>
</li>
<li>
<p>base 16)</p>
</li>
</ul> </p>]]></text>
		</responsetemplate>
	</question>
	<question type="essay">
		<name>
			<text> Memorie volatili e non </text>
		</name>
		<questiontext format = "html">
		<text><![CDATA[<p><p>Illustrare la differenza tra una <em>memoria volatile</em> e una <em>non volatile</em> e classificare secondo questa caratteristica le principali memorie di un elaboratore.</p></p>]]></text>
		</questiontext>
		<generalfeedback format = "html">
		<text></text>
		</generalfeedback>
		<defaultgrade> 2.0 </defaultgrade>
		<penalty> 0 </penalty>
		<hidden> 0 </hidden>
		<responseformat>editor</responseformat>
		<responserequired>0</responserequired>
		<responsefieldlines>15</responsefieldlines>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<graderinfo format="html">
		<text></text>
		</graderinfo>
		<responsetemplate format="html">
		<text><![CDATA[<p>  </p>]]></text>
		</responsetemplate>
	</question>
	<question type="essay">
		<name>
			<text> Argomenti funzione </text>
		</name>
		<questiontext format = "html">
		<text><![CDATA[<p><p>In una funzione Python, qual'è la differenza tra <em>argomenti</em> e <em>valori restituiti</em>? Quanti argomenti può avere una invocazione di funzione? E quanti valori restituiti?</p></p>]]></text>
		</questiontext>
		<generalfeedback format = "html">
		<text></text>
		</generalfeedback>
		<defaultgrade> 2.0 </defaultgrade>
		<penalty> 0 </penalty>
		<hidden> 0 </hidden>
		<responseformat>editor</responseformat>
		<responserequired>0</responserequired>
		<responsefieldlines>15</responsefieldlines>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<graderinfo format="html">
		<text></text>
		</graderinfo>
		<responsetemplate format="html">
		<text><![CDATA[<p>  </p>]]></text>
		</responsetemplate>
	</question>
	<question type="coderunner">
		<name>
			<text><![CDATA[Incroci]]></text>
		</name>
		<questiontext format="html">
			<text><![CDATA[<p><h1>Incroci</h1>
<p>Si scriva un programma per la gestione delle precedenze ad un incrocio di tre strade denominate N, S, E.  Si scriva un programma per la gestione delle precedenze ad un incrocio di tre strade.  Il programma deve leggere gli arrivi sulle varie file tramite un file che si chiama “arrivi.txt”. Ogni riga di tale file rappresenta un certo istante di tempo in questo modo:</p>
<pre><code>TARGA_N TARGA_S TARGA_E
</code></pre>
<p>Dove <code>TARGA</code> è una stringa di 7 caratteri, <code>TARGA_N</code> indica un arrivo dalla strada N, <code>TARGA_S</code> indica un arrivo dalla strada S, <code>TARGA_E</code> indica arrivo dalla strada E. Nel caso in cui non ci sia una macchina proveniente da una determinata strada <code>TARGA</code> sarà rappresentata dalla stringa <strong>XXXXXX</strong>.</p>
<p>Per ogni istante di tempo considerato (ovvero per ogni riga del file in ingresso) il programma deve scrivere su schermo la macchina che può attraversare l’incrocio secondo la seguente regola: ha precedenza la macchina della fila più lunga. Nel caso di file di ugual lunghezza si scelga la prima esaminata (quindi, l’ordine di precedenza è <code>N-&gt;S-&gt;E</code>). Terminata la lettura del file in input continuare il programma deve continuare a scrivere in ordine le targhe delle macchine che attraversano l’incrocio fino all’esaurimento delle stesse.</p>
<p>Una macchina che non passa ad un certo istante di tempo all’incrocio rimane in fila. I nuovi arrivi di macchine ad ogni istante di tempo si accodano alle rispettive file.</p>
<h1>Esempio file arrivi.txt (in input)</h1>
<pre><code>AA100BB CC200FF GG300HH  
CC100ZZ YY200PP VV500KK   
NN200KK XXXXXXX HH200DD   
XXXXXXX FF600PP XXXXXXX
</code></pre>
<h1>Esempio esecuzione:</h1>
<pre><code>c:&gt; python incrocio.py
</code></pre>
<p>Output (creato dal programma)</p>
<pre><code>AA100BB  
CC200FF  
GG300HH  
CC100ZZ   
YY200PP  
VV500KK  
NN200KK  
FF600PP  
HH200DD
</code></pre></p><p><strong>NOTA</strong>:
premete il pulsante "verifica risposta" per eseguire il codice 
(ricordatevi che non è necessario per l'esame che il codice sia 
compilabile ed eseguibile correttamente; la possibilità di eseguirlo vi 
permette di controllare se quello che avete scritto funziona. Verrà 
comunque corretta la logica del programma e l'approccio alla sua 
soluzione)</p>
<p><strong>DOCUMENTAZIONE</strong>: <a href="https://docs.python.org/3/" target="_blank" title="Doc. python">Documentazione online di Python</a>.</p>]]></text>
		</questiontext>
		<generalfeedback format="html">
		<text></text>
		</generalfeedback>
		<defaultgrade>26.0</defaultgrade>
		<penalty>0.0000000</penalty>
		<hidden>0</hidden>
		<coderunnertype>python3_sandbox-1</coderunnertype>
		<prototypetype>2</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<showsource>0</showsource>
		<answerboxlines>30</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload># i file specificati NON sono visibili direttamente, ma esistono e si possono aprire

# compile to see contents of file arrivi.txt
print(open("arrivi.txt", "r").read())
</answerpreload>
		<useace>0</useace>
		<resultcolumns></resultcolumns>
		<template><![CDATA[
import os
os.environ['OPENBLAS_NUM_THREADS'] = '400'
os.environ['MPLCONFIGDIR'] = "/tmp"

import json
import base64
import subprocess
import re
import os.path
import sys
import tempfile



# Define lines of code to insert before student's code
PREFIX = ["__saved_input__ = input",
          "def input(prompt=''):",
          "    response = __saved_input__(prompt).rstrip()",
          "    print(response)",
          "    return response"
]

def make_data_uri(filename):
    """Given a png or jpeg image filename (which must end in .png or .jpg/.jpeg 
       resp.) return a data URI as a UTF-8 string.
    """
    with open(filename, 'br') as fin:
        contents = fin.read()
    contents_b64 = base64.b64encode(contents).decode('utf8')
    if filename.endswith('.png'):
        return "data:image/png;base64,{}".format(contents_b64)
    elif filename.endswith('.jpeg') or filename.endswith('.jpg'):
        return "data:image/jpeg;base64,{}".format(contents_b64)
    else:
        raise Exception("Unknown file type passed to make_data_uri")
        
    
def tweak_line_numbers(error):
    """Adjust the line numbers in the error message to account for extra lines"""
    new_error = ''
    for line in error.splitlines():
        match = re.match("(.*File \")([^\"]+)(.*, line )([0-9]+)(.*)", line)
        if match:
            line = match.group(1) + 'esame.py' + match.group(3) + str(int(match.group(4)) - len(PREFIX)) + match.group(5) 
        new_error += line + '\n'
    return new_error

student_code = '\n'.join(PREFIX) + '\n'
student_code += """{{ STUDENT_ANSWER | e('py') }}"""

inputfile = None
if 'stdin.txt' in os.listdir():
    inputfile = open('stdin.txt')
    
output = ''
failed = False
try:
    with tempfile.NamedTemporaryFile() as temp:
        temp.write(str.encode(student_code))
        temp.flush()
        outcome = subprocess.run(
            ['python3', temp.name],
            stdin=inputfile,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout = 25, # 25 second timeout MUST BE LESS THAN DEFAULT FOR QUESTION TYPE
            universal_newlines=True,
            check=True
        )
except subprocess.CalledProcessError as e:
    outcome = e
    output = "Task failed with return code = {}\n".format(outcome.returncode)
    failed = True
except subprocess.TimeoutExpired as e:
    outcome = e
    output = "Task timed out\n"
output += outcome.stdout
if outcome.stderr:
    output += "*** Error output ***\n"
    output += tweak_line_numbers(outcome.stderr)

html = ''
if output:
    html += f"<h4>Text output:</h4>\n<pre style=background-color:white><p style=\"font-family:'Courier New'\">{output}</p></pre>\n<hr style='border:0px'>\n"
else:
    html += f"<h5>No text output</h5>\n"

files = sorted(os.listdir())
for filename in files:
    if filename.endswith('.png'):
        data_uri = make_data_uri(filename)
        html += f"""<h4>{filename}</h4><img class="data-uri-example" title="{filename}" src="{data_uri}" alt="{filename}">
<hr style='border:0px'>
"""

# Lastly print the JSON-encoded result required of a combinator grader
print(json.dumps({'fraction':1.0,
                  'epiloguehtml': html,
                  'showoutputonly': True
                  
}))

]]>
		</template>
		<iscombinatortemplate>1</iscombinatortemplate>
		<allowmultiplestdins>0</allowmultiplestdins>
		<answer></answer>
		<validateonsave>1</validateonsave>
		<testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
		<language>python3</language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader>TemplateGrader</grader>
		<cputimelimitsecs>30</cputimelimitsecs>
		<memlimitmb>1000</memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<twigall>1</twigall>
		<uiplugin>ace</uiplugin>
		<attachments>3</attachments>
		<attachmentsrequired>1</attachmentsrequired>
		<maxfilesize>102400</maxfilesize>
		<filenamesregex>stdin.txt|.*\.dat</filenamesregex>
		<filenamesexplain>Optionally attach a file stdin.txt to be used as standard input and/or a data file with extension .dat for other use by the program.</filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<file name="arrivi.txt" path="/" encoding="base64">QUExMDBCQiBDQzIwMEZGIEdHMzAwSEgKQ0MxMDBaWiBZWTIwMFBQIFZWNTAwS0sKTk4yMDBLSyBYWFhYWFhYIEhIMjAwREQgClhYWFhYWFggRkY2MDBQUCBYWFhYWFhYIAo=</file>
		</testcases>
	</question>
</quiz>
